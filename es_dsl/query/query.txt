match
	field:match
		field:mesage(自己填写)
			field:query
				value:whywhy (自己填写)
			field:operator:
				value: and 或者or
	example:
		"match" : {
	        "message" : {
	            "query" : "this is a test",
	            "operator" : "and"
	             "analyzer" : "my_analyzer"  #可选填
	        }
	    }

multi match
	example:
		"multi_match" : {
		    "query":      "Jon",
		    "fields":     [   					#可以填写多个
		        "first", "first.edge",
		        "last",  "last.edge"
		    ],
		    "operator":   "and" 				#and 或者 or
		    "analyzer" : "my_analyzer"  #可选填
		  }

bool
	example:
		{
		    "bool" : {
		        "must" : {
		            "term" : { "user" : "kimchy" }   #还是可以嵌套其他query
		        },
		        "must_not" : {
		            "range" : {
		                "age" : { "from" : 10, "to" : 20 }
		            }
		        },
		        "should" : [
		            {
		                "term" : { "tag" : "wow" }
		            },
		            {
		                "term" : { "tag" : "elasticsearch" }
		            }
		        ],
		        "minimum_should_match" : 1,     #可以填写
		        "boost" : 1.0					#可以填写
		    }
		}

filtered query（filtered这个和match是同一级别）
	example:
		"filtered": { 
		      "query": {
		        "match": { "tweet": "full text search" }    #这里面可以放query语句
		      },
		      "filter": {
		        "range": { "created": { "gte": "now-1d/d" }}  ＃这里面可以放filter语句
		      }
		    }

prefix
	example:
		{
    		"prefix" : { "user" : "ki" }
		}

query string
	example:
	{
	    "query_string": {
	      "query": "(content:this OR name:this) AND (content:that OR name:that)" (是否可以在一些查询语句旁边有个小的问号，当鼠标放在上面就给出范例)
	    }
	}
	
range 
	example:
	{
	    "range" : {
	        "age" : {
	            "gte" : 10,
	            "lte" : 20
	        }
	    }
	}

regexp
	example:
	{
	    "regexp":{
	        "name": "s.*y"(建议这个给出范例)
	    }
	}

term
	example:
	{
          "term": {
            "status": {
              "value": "urgent"
            }
          }
        }

Wildcard
	example:
	{
    	"wildcard" : { "user" : "ki*y" }(建议给出范例)
	}

#这个最复杂，最强大
function score query
	

